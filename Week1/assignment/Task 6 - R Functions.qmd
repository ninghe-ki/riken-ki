---
title: "Task 6 - R Functions"
author: "Hening - Karolinska Institutet"
date: "`r format(Sys.time(),'%Y-%m-%d')`"
date-format: "YYYY-MM-DD"
format:
  html:
    toc: true
    embed-resources: true
    number-sections: true
    code-fold: false
    code-block-bg: true
    code-overflow: scroll
    title-block-banner: true
    fig-align: center
    df-print: paged
    grid: 
      content-mode: auto
    smooth-scroll: true
    page-navigation: true
execute:
  warning: false
editor_options: 
  chunk_output_type: console
---

## 1. Write a function that calculates the ratio of the mean and the median of a given vector. This is a helpful measure to detect data with outlying values. Note: See Reference for R language
```{r}
mean_median_ratio <- function(x, na.rm = TRUE) {
  mea <- mean(x, na.rm = na.rm)
  med <- median(x, na.rm = na.rm)
  ratio <- mea / med
  return(ratio)
}

x <- c(1,2,3, 5,6,7,8,9)
mean_median_ratio(x)
```

## 2. Write a function that ignores the lowest and the highest value from a given vector and calculate the mean.
```{r}
trimmed_mean_minmax <- function(x, na.rm = TRUE) {
  min_val <- min(x)
  max_val <- max(x)
  
  x_trimmed <- x
  min_idx <- which(x_trimmed == min_val)[1]
  x_trimmed <- x_trimmed[-min_idx]
  
  max_idx <- which(x_trimmed == max_val)[1]
  x_trimmed <- x_trimmed[-max_idx]
  
  mean_val <- mean(x_trimmed)
  
  return(mean_val)
}

x <- c(1,2,3, 5,6,7,8,9)
trimmed_mean_minmax(x)
```

## 3. Read about piping from here:https://r4ds.had.co.nz/pipes.html#pipes (you donâ€™t have to learn everything, a basic understanding of the usage is enough). Write a short (max. 300 characters, no spaces) explanation of why, how, and when not to use pipes.

1. Short, simple operations: For single functions like mean(x), pipes add unnecessary complexity.
2. Multiple inputs: When functions need multiple data objects as inputs, pipes become awkward since they only pass one object forward.
3. Non-linear workflows: If you need to reuse intermediate results multiple times or branch your analysis in different directions, storing intermediate variables is clearer.
4. Debugging complex chains: Long pipe chains can be difficult to debug. Breaking them into steps with intermediate variables makes it easier to inspect each stage.
5. Performance-critical code: Pipes have minimal overhead, but for computationally intensive operations, direct function calls may be slightly faster.
6. When team members are unfamiliar: If collaborators don't know pipe syntax, traditional R syntax may be more accessible.

## 4. Familiarize yourself with the apply-family of functions (apply, lapply, sapply etc). http://uc-r.github.io/apply_family Write a short explanation (max. 300 characters, no spaces) of why they could be useful in your work.

The apply family functions are powerful tools for repeating operations without writing explicit loops. They make code cleaner and often faster than for-loops. They avoid repetitive loop syntax; often more efficient than manual loops; make code more readable and concise; reduce chances of indexing errors.

## Date & Session
```{r}
#| collapse: true
#| results: hold
date()
sessionInfo()
```
