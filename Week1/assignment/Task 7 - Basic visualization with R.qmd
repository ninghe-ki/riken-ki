---
title: "Task 7 - Basic visualization with R"
author: "Hening - Karolinska Institutet"
date: "`r format(Sys.time(),'%Y-%m-%d')`"
date-format: "YYYY-MM-DD"
format:
  html:
    toc: true
    embed-resources: true
    number-sections: true
    code-fold: false
    code-block-bg: true
    code-overflow: scroll
    title-block-banner: true
    fig-align: center
    df-print: paged
    grid: 
      content-mode: auto
    smooth-scroll: true
    page-navigation: true
execute:
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(ggpubr)
library(patchwork)
library(tidyverse)
```

## 1. Compare the distributions of the body heights of the two species from the 'magic_guys.csv' dataset graphically.
### a. using the basic 'hist' function as well as ‘ggplot’ and ‘geom_histogram’ functions from the ggplot2 package. Optimize the plots for example by trying several different 'breaks'. Note that ggplot2-based functions give you many more options for changing the visualization parameters, try some of them.
```{r}
#| fig-height: 8
#| fig-width: 8
setwd("/Users/ninghe/Desktop/course/riken-ki")
data <- read_csv("./Week1/data/magic_guys.csv")
print(data)

species1_data <- data[data$species == unique(data$species)[1], ]
species2_data <- data[data$species == unique(data$species)[2], ]

par(mfrow = c(2, 2))
hist(species1_data$length, 
     main = paste("Height Distribution -", unique(data$species)[1]),
     xlab = "Height", 
     col = "lightblue")

hist(species2_data$length, 
     main = paste("Height Distribution -", unique(data$species)[2]),
     xlab = "Height", 
     col = "lightcoral")

breaks1 <- seq(min(species1_data$length), max(species1_data$length), 
               length.out = ceiling(log2(nrow(species1_data))) + 1)
breaks2 <- seq(min(species2_data$length), max(species2_data$length), 
               length.out = ceiling(log2(nrow(species2_data))) + 1)

hist(species1_data$length, 
     breaks = breaks1,
     main = paste("Height Distribution (Optimized) -", unique(data$species)[1]),
     xlab = "Height", 
     col = "lightblue")

hist(species2_data$length, 
     breaks = breaks2,
     main = paste("Height Distribution (Optimized) -", unique(data$species)[2]),
     xlab = "Height", 
     col = "lightcoral")
```

```{r}
#| fig-height: 4
#| fig-width: 25
p1 <- ggplot(data, aes(x = length, fill = species)) +
  geom_histogram(alpha = 0.7, position = "identity") +
  facet_wrap(~species, scales = "free_y") +
  labs(title = "Height Distribution by Species (Default bins)",
       x = "Height",
       y = "Frequency") +
  theme_minimal() +
  theme(legend.position = "bottom")

p2 <- ggplot(data, aes(x = length, fill = species)) +
  geom_histogram(bins = 30, alpha = 0.7, position = "identity") +
  facet_wrap(~species, scales = "free_y") +
  labs(title = "Height Distribution by Species (30 bins)",
       x = "Height",
       y = "Frequency") +
  theme_minimal() +
  theme(legend.position = "bottom")

range_height <- range(data$length)
optimal_binwidth <- (range_height[2] - range_height[1]) / 25
p3 <- ggplot(data, aes(x = length, fill = species)) +
  geom_histogram(binwidth = optimal_binwidth, alpha = 0.7, position = "identity") +
  facet_wrap(~species, scales = "free_y") +
  labs(title = paste("Height Distribution by Species (binwidth =", round(optimal_binwidth, 2), ")"),
       x = "Height",
       y = "Frequency") +
  theme_minimal() +
  theme(legend.position = "bottom")

p4 <- ggplot(data, aes(x = length, fill = species)) +
  geom_histogram(bins = 25, alpha = 0.6, position = "identity") +
  labs(title = "Overlaid Height Distribution Comparison",
       x = "Height",
       y = "Frequency") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  scale_fill_manual(values = c("lightblue", "lightcoral"))

p5 <- ggplot(data, aes(x = length, fill = species)) +
  geom_histogram(aes(y = after_stat(density)), bins = 25, alpha = 0.6, position = "identity") +
  geom_density(alpha = 0.3, size = 1) +
  labs(title = "Height Distribution with Density Overlay",
       x = "Height",
       y = "Density") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  scale_fill_manual(values = c("lightblue", "lightcoral"))

wrap_plots(p1, p2, p3, p4, p5, nrow = 1)
```

```{r}
cat("\nStatistical Summary by Species:\n")
data %>%
  group_by(species) %>%
  summarise(
    n = n(),
    mean_height = mean(length, na.rm = TRUE),
    median_height = median(length, na.rm = TRUE),
    sd_height = sd(length, na.rm = TRUE),
    min_height = min(length, na.rm = TRUE),
    max_height = max(length, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  print()
```

### b. Do the same comparison as in a. but with boxplots. If you want to use the ggplot2-package, use the functions ‘ggplot’ and ‘geom_boxplot’.
```{r}
#| fig-height: 8
#| fig-width: 6
par(mfrow = c(2, 2))

boxplot(length ~ species, 
        data = data,
        main = "Height Distribution by Species",
        xlab = "Species",
        ylab = "Height",
        col = c("lightblue", "lightcoral"),
        border = "black",
        outline = TRUE)

species_counts <- table(data$species)
text(x = 1:length(species_counts), 
     y = par("usr")[3] - 0.05 * diff(par("usr")[3:4]), 
     labels = paste("n =", species_counts), 
     pos = 3, 
     xpd = TRUE)

boxplot(length ~ species, 
        data = data,
        main = "Height Distribution by Species (Horizontal)",
        xlab = "Height",
        ylab = "Species",
        col = c("lightblue", "lightcoral"),
        border = "black",
        horizontal = TRUE,
        outline = TRUE)

boxplot(length ~ species, 
        data = data,
        main = "Height Distribution with Median CI",
        xlab = "Species",
        ylab = "Height",
        col = c("lightblue", "lightcoral"),
        border = "black",
        notch = TRUE,
        outline = TRUE)

boxplot(length ~ species, 
        data = data,
        main = "Enhanced Height Distribution",
        xlab = "Species",
        ylab = "Height",
        col = c("lightblue", "lightcoral"),
        border = c("darkblue", "darkred"),
        lwd = 2,
        outline = TRUE,
        pch = 16,
        cex = 0.8,
        whisklty = 1,
        staplelty = 1,
        whisklwd = 2,
        staplelwd = 2)
```

```{r}
#| fig-height: 9
#| fig-width: 12
p1 <- ggplot(data, aes(x = species, y = length, fill = species)) +
  geom_boxplot(alpha = 0.7, outlier.shape = 16, outlier.size = 2) +
  labs(title = "Height Distribution by Species",
       x = "Species",
       y = "Height") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("lightblue", "lightcoral"))

p2 <- ggplot(data, aes(x = species, y = length, fill = species)) +
  geom_boxplot(alpha = 0.7, outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1.5) +
  labs(title = "Height Distribution with Individual Data Points",
       x = "Species",
       y = "Height") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("lightblue", "lightcoral"))

sample_sizes <- data %>%
  group_by(species) %>%
  summarise(n = n(), .groups = 'drop')

p3 <- ggplot(data, aes(x = species, y = length, fill = species)) +
  geom_boxplot(notch = TRUE, alpha = 0.7, outlier.shape = 16) +
  geom_text(data = sample_sizes, 
            aes(x = species, y = min(data$length) - 0.05 * diff(range(data$length)), 
                label = paste("n =", n)), 
            inherit.aes = FALSE, 
            vjust = 1) +
  labs(title = "Notched Boxplot with Sample Sizes",
       x = "Species",
       y = "Height",
       subtitle = "Notches represent 95% CI for median") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("lightblue", "lightcoral"))

p4 <- ggplot(data, aes(x = species, y = length, fill = species)) +
  geom_violin(alpha = 0.5, trim = FALSE) +
  geom_boxplot(width = 0.2, alpha = 0.8, outlier.shape = 16) +
  labs(title = "Violin Plot with Boxplot Overlay",
       x = "Species",
       y = "Height") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("lightblue", "lightcoral"))

p5 <- ggplot(data, aes(x = species, y = length, fill = species)) +
  geom_boxplot(alpha = 0.7, outlier.shape = 16) +
  coord_flip() +
  labs(title = "Horizontal Height Distribution",
       x = "Species",
       y = "Height") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("lightblue", "lightcoral"))

p6 <- ggplot(data, aes(x = species, y = length, fill = species)) +
  geom_boxplot(alpha = 0.7, 
               outlier.shape = 21, 
               outlier.fill = "white", 
               outlier.color = "black",
               outlier.size = 2,
               notch = FALSE) +
  stat_summary(fun = mean, geom = "point", shape = 23, size = 3, fill = "white") +
  labs(title = "Enhanced Boxplot with Mean Indicators",
       x = "Species",
       y = "Height",
       subtitle = "Diamonds indicate mean values") +
  theme_classic() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("lightblue", "lightcoral"))

wrap_plots(p1, p2, p3, p4, p5, p6, nrow = 2)
```

### c. Save the plots with the ‘png’, ‘pdf’, and ‘svg’ formats. In which situation would you use which file format?
```{r}
#pdf("xxxxxxxxx", height = 10, width = 10)
#dev.off()
#ggsave("xxxxxxxxx", height = 10, width = 10)
```

## 2. Load the gene expression data matrix from the ‘microarray_data.tab’ dataset provided in the shared folder, it is a big tabular separated matrix.
### a. How big is the matrix in terms of rows and columns?
```{r}
setwd("/Users/ninghe/Desktop/course/riken-ki")
data <- read.delim("./Week1/data/microarray_data.tab")
print(data[1:6,1:6])

dim(data)
```

### b. Count the missing values per gene and visualize this result.
```{r}
#| fig-height: 11
#| fig-width: 10
n_genes <- nrow(data)
n_samples <- ncol(data)

missing_per_gene <- rowSums(is.na(data))
missing_percentage_per_gene <- (missing_per_gene / n_samples) * 100

gene_missing_data <- data.frame(
  gene = rownames(data),
  missing_count = missing_per_gene,
  missing_percentage = missing_percentage_per_gene,
  stringsAsFactors = FALSE
)

cat("Missing values summary:\n")
cat("Total missing values:", sum(missing_per_gene), "\n")
cat("Percentage of total data points missing:", 
    round((sum(missing_per_gene) / (n_genes * n_samples)) * 100, 2), "%\n")
cat("Genes with no missing values:", sum(missing_per_gene == 0), "\n")
cat("Genes with some missing values:", sum(missing_per_gene > 0), "\n")
cat("Genes with all values missing:", sum(missing_per_gene == n_samples), "\n")
print(summary(missing_percentage_per_gene))

p1 <- ggplot(gene_missing_data, aes(x = missing_count)) +
  geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7, color = "black") +
  labs(title = "Distribution of Missing Values per Gene",
       x = "Number of Missing Values per Gene",
       y = "Number of Genes") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

p2 <- ggplot(gene_missing_data, aes(x = missing_percentage)) +
  geom_histogram(bins = 50, fill = "coral", alpha = 0.7, color = "black") +
  labs(title = "Distribution of Missing Value Percentages per Gene",
       x = "Percentage of Missing Values per Gene",
       y = "Number of Genes") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

p3 <- ggplot(gene_missing_data, aes(y = missing_percentage)) +
  geom_boxplot(fill = "lightgreen", alpha = 0.7) +
  labs(title = "Boxplot of Missing Value Percentages per Gene",
       y = "Percentage of Missing Values per Gene") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())

top_missing_genes <- gene_missing_data %>%
  arrange(desc(missing_percentage)) %>%
  head(20)

if(nrow(top_missing_genes) > 0) {
  p4 <- ggplot(top_missing_genes, aes(x = reorder(gene, missing_percentage), 
                                     y = missing_percentage)) +
    geom_col(fill = "darkred", alpha = 0.7) +
    coord_flip() +
    labs(title = "Top 20 Genes with Highest Missing Value Percentages",
         x = "Gene",
         y = "Percentage of Missing Values") +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5))
}

wrap_plots(p1, p2, p3, p4, nrow = 2)
```

### c. Find the genes for which there are more than X% (X=10%, 20%, 50%) missing values.
```{r}
#| fig-height: 6
#| fig-width: 5
thresholds <- c(10, 20, 50)

find_high_missing_genes <- function(threshold) {
  genes_above_threshold <- gene_missing_data %>%
    filter(missing_percentage > threshold) %>%
    arrange(desc(missing_percentage))
  
  return(genes_above_threshold)
}

threshold_results <- list()
for(threshold in thresholds) {
  high_missing_genes <- find_high_missing_genes(threshold)
  threshold_results[[paste0(threshold, "%")]] <- high_missing_genes
  
  cat("\nGenes with >", threshold, "% missing values:\n")
  cat("Number of genes:", nrow(high_missing_genes), "\n")
  cat("Percentage of total genes:", 
      round((nrow(high_missing_genes) / n_genes) * 100, 2), "%\n")
  
  if(nrow(high_missing_genes) > 0) {
    cat("Top 5 genes with highest missing percentages:\n")
    print(head(high_missing_genes[, c("gene", "missing_percentage")], 5))
  }
}

threshold_summary <- data.frame(
  threshold = paste0(">", thresholds, "%"),
  count = sapply(thresholds, function(x) sum(gene_missing_data$missing_percentage > x)),
  percentage = sapply(thresholds, function(x) 
    round((sum(gene_missing_data$missing_percentage > x) / n_genes) * 100, 2))
)

p5 <- ggplot(threshold_summary, aes(x = threshold, y = count)) +
  geom_col(fill = "purple", alpha = 0.7) +
  geom_text(aes(label = paste0(count, " (", percentage, "%)")), 
            vjust = -0.3, size = 3.5) +
  labs(title = "Number of Genes Above Missing Value Thresholds",
       x = "Missing Value Threshold",
       y = "Number of Genes") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

print(p5)
```

### d. Replace the missing values by the average expression value for the particular gene. (Note: Imputing data has to be used with caution!)
```{r}
#| fig-height: 4
#| fig-width: 8
data_imputed <- data

total_missing_before <- sum(is.na(data_imputed))
cat("Total missing values before imputation:", total_missing_before, "\n")

for(i in 1:nrow(data_imputed)) {
  gene_mean <- mean(as.numeric(data_imputed[i, ]), na.rm = TRUE)
  
  if(!is.nan(gene_mean)) {
    data_imputed[i, is.na(data_imputed[i, ])] <- gene_mean
  } else {
    overall_mean <- mean(as.matrix(data), na.rm = TRUE)
    data_imputed[i, is.na(data_imputed[i, ])] <- overall_mean
  }
}

total_missing_after <- sum(is.na(data_imputed))
cat("Total missing values after imputation:", total_missing_after, "\n")
cat("Successfully imputed:", total_missing_before - total_missing_after, "values\n")

if(total_missing_after == 0) {
  cat("✓ All missing values have been successfully imputed!\n")
} else {
  cat("⚠ Warning: Some missing values remain after imputation\n")
}

cat("\nExample comparison (first 3 genes, first 10 samples):\n")
cat("BEFORE imputation:\n")
print(data[1:3, 1:10])
cat("\nAFTER imputation:\n")
print(data_imputed[1:3, 1:10])

cat("\nData distribution comparison:\n")
cat("Original data summary:\n")
print(summary(as.vector(as.matrix(data))))

cat("\nImputed data summary:\n")
print(summary(as.vector(as.matrix(data_imputed))))

if(n_genes * n_samples > 100000) {
  sample_indices <- sample(1:(n_genes * n_samples), 50000)
  original_sample <- as.vector(as.matrix(data))[sample_indices]
  imputed_sample <- as.vector(as.matrix(data_imputed))[sample_indices]
} else {
  original_sample <- as.vector(as.matrix(data))
  imputed_sample <- as.vector(as.matrix(data_imputed))
}

comparison_data <- data.frame(
  value = c(original_sample, imputed_sample),
  dataset = rep(c("Original", "Imputed"), 
                c(length(original_sample), length(imputed_sample)))
) %>%
  filter(!is.na(value))  # Remove NAs for visualization

p6 <- ggplot(comparison_data, aes(x = value, fill = dataset)) +
  geom_histogram(alpha = 0.6, bins = 50, position = "identity") +
  facet_wrap(~dataset, scales = "free_y") +
  labs(title = "Distribution Comparison: Original vs Imputed Data",
       x = "Expression Value",
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "bottom") +
  scale_fill_manual(values = c("Original" = "blue", "Imputed" = "red"))

print(p6)
```

## 3. Visualize the data in the CO2 dataset in a way that gives you a deeper understanding of the data. What do you see?
```{r}
#| fig-height: 10
#| fig-width: 25
data(CO2)

p1 <- ggplot(CO2, aes(x = uptake)) +
  geom_histogram(bins = 20, fill = "lightblue", alpha = 0.7, color = "black") +
  labs(title = "Distribution of CO2 Uptake Rates",
       x = "CO2 Uptake Rate (μmol/m²·s)",
       y = "Frequency") +
  theme_minimal()

p2 <- ggplot(CO2, aes(x = uptake, fill = Type)) +
  geom_histogram(bins = 15, alpha = 0.7, position = "identity") +
  facet_grid(Treatment ~ Type) +
  labs(title = "CO2 Uptake Distribution by Origin and Treatment",
       x = "CO2 Uptake Rate (μmol/m²·s)",
       y = "Frequency") +
  theme_minimal() +
  theme(legend.position = "bottom")

p3 <- ggplot(CO2, aes(x = conc, y = uptake)) +
  geom_point(alpha = 0.6, size = 2) +
  geom_smooth(method = "loess", se = TRUE, color = "red", linewidth = 1.2) +
  labs(title = "CO2 Uptake vs Concentration (Overall Pattern)",
       x = "CO2 Concentration (mL/L)",
       y = "CO2 Uptake Rate (μmol/m²·s)") +
  theme_minimal()

p4 <- ggplot(CO2, aes(x = conc, y = uptake, color = Type)) +
  geom_point(alpha = 0.7, size = 2) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 1.2) +
  facet_wrap(~Treatment) +
  labs(title = "CO2 Uptake vs Concentration by Origin and Treatment",
       x = "CO2 Concentration (mL/L)",
       y = "CO2 Uptake Rate (μmol/m²·s)") +
  theme_minimal() +
  scale_color_manual(values = c("Quebec" = "blue", "Mississippi" = "red")) +
  theme(legend.position = "bottom")

p5 <- ggplot(CO2, aes(x = conc, y = uptake, color = Type)) +
  geom_line(aes(group = Plant), alpha = 0.7, linewidth = 0.8) +
  geom_point(alpha = 0.5, size = 1.5) +
  facet_grid(Treatment ~ Type) +
  labs(title = "Individual Plant CO2 Response Curves",
       x = "CO2 Concentration (mL/L)",
       y = "CO2 Uptake Rate (μmol/m²·s)",
       subtitle = "Each line represents one plant") +
  theme_minimal() +
  theme(legend.position = "none")

p6 <- ggplot(CO2, aes(x = Treatment, y = uptake, fill = Treatment)) +
  geom_boxplot(alpha = 0.7) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
  facet_wrap(~Type) +
  labs(title = "CO2 Uptake Comparison: Chilled vs Non-chilled",
       x = "Treatment",
       y = "CO2 Uptake Rate (μmol/m²·s)") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("nonchilled" = "orange", "chilled" = "lightblue"))

p7 <- ggplot(CO2, aes(x = Type, y = uptake, fill = Type)) +
  geom_boxplot(alpha = 0.7) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
  facet_wrap(~Treatment) +
  labs(title = "CO2 Uptake Comparison: Quebec vs Mississippi Origins",
       x = "Plant Origin",
       y = "CO2 Uptake Rate (μmol/m²·s)") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("Quebec" = "darkblue", "Mississippi" = "darkred"))

p8 <- ggplot(CO2, aes(x = factor(conc), y = uptake, fill = interaction(Type, Treatment))) +
  geom_boxplot(alpha = 0.7) +
  labs(title = "CO2 Uptake at Different Concentration Levels",
       x = "CO2 Concentration (mL/L)",
       y = "CO2 Uptake Rate (μmol/m²·s)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.title = element_blank()) +
  scale_fill_manual(values = c("Quebec.nonchilled" = "lightblue",
                              "Quebec.chilled" = "blue",
                              "Mississippi.nonchilled" = "lightcoral",
                              "Mississippi.chilled" = "red"))

interaction_data <- CO2 %>%
  group_by(Type, Treatment, conc) %>%
  summarise(mean_uptake = mean(uptake),
            se_uptake = sd(uptake) / sqrt(n()),
            .groups = 'drop')
p9 <- ggplot(interaction_data, aes(x = conc, y = mean_uptake, color = Type, linetype = Treatment)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = mean_uptake - se_uptake, ymax = mean_uptake + se_uptake), 
                width = 20, alpha = 0.7) +
  labs(title = "Mean CO2 Uptake Response with Standard Errors",
       x = "CO2 Concentration (mL/L)",
       y = "Mean CO2 Uptake Rate (μmol/m²·s)",
       subtitle = "Error bars represent standard error of the mean") +
  theme_minimal() +
  scale_color_manual(values = c("Quebec" = "blue", "Mississippi" = "red")) +
  theme(legend.position = "bottom")

wrap_plots(p1, p2, p3, p4, p5, p6, p7, p8, p9, nrow = 2)
```

## Date & Session
```{r}
#| collapse: true
#| results: hold
date()
sessionInfo()
```
